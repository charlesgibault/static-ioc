Please find below some visibility on the planned feature roadmap

// Release 0.1
  * Initial release. Java target with maven plugin and command line tool.

// Release 0.2
  * *Core* - Made beans declaration, instanciation, and setup order predictable 
  * *Core* - Added name alias support for bean when id and name are both declared
  * *Core* - Fixed constructor arguments support when no index was provided or when using direct value/ref/idref attribute
  * *Core* - Add support for factory bean / factory method
  * *Generator* - Implement destructor workflow
  * *Java Generator* - Add proper @SuppressWarnings to have warnings free class when generics are in use
  * *Java Generator* - Fix handling of .class parameters 
  * *Samples* - Add full GWT sample project using MVP

// Release 0.3 (In progress)
// ---------- DONE:
  * *Core* - Refactor collection and parent dependency for cleaner static-ioc core module classes
  * *Core* - Add plugin chain mechanism to ease extension of supported nodes 
  * *Core* - Add support for init-method/ afterPropertiesSet mechanism for post initing bean
  * *Core* - Add support for destroy-method / Teardown() mechanism
  * *Core* - Fix prototype bean's naming convention
  * *Core* - Handle dependency with constructor args reference for proper order declaration 
  * *Core* - Improve dependency resolution with factory-bean for proper order declaration 
  * *Generator* - Add support for init-method and destroy-methods 
  * *Generator* - Fixed indentation on destructor
  * *Java Generator* - Changed @SuppressWarnings annotations to a @SuppressWarnings(all)
  * *Samples* - Use init-method to simplify GWT sample
  * *Samples* - Cleaned-up GWT samples (removed warnings)


// ---------- To be started
  * *Core* - Refactor prototype dependency resolution to use new generic dependency resolution mechanism

// Release 0.4
  * *Core* - Add namespace plugin mechanism
  * *Core* - Add namespace plugin for GWT to make bean definition less versbose
  * *Samples* - Use GWT bean plugin to simplify GWT sample

// Release 0.5
  * *Generator* - Add compile time support for PropertyPlaceHolders like mechanism
  * *Generator* - Support Python target
  * *Generator* - Support Objective C and Cpp targets

// Release 0.6+
  * *Generator* - Add runtime interface to allow for support for PropertyPlaceHolders like mechanism
  * *Samples* -  Add Play N sample project?
